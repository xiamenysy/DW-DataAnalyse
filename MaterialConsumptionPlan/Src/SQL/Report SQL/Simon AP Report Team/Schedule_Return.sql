2. Extract planning data for analysis
- Material
- Catalog number
- Current series code : X 
- Material D-chain status
- Unit cost
- Extended cost $ : qty(provide the distributor return qty)*unit_cost
- Delivery unit : 
- Quarterly sales line count of last 4 quarters
- Quarterly sales quantity sum of last 4 quarters
- Allowed on Schedule Return flag: ask 
- Stock status in return country (Strategy group)
--OH Qty
--SG
--AVG_13WEEK_USAGE
- Stock status in other AP country (Strategy group) OTHER PLANTS STATUS
--OH Qty
--SG
--AVG_13WEEK_USAGE
- Stock status in CDC (Strategy group)
--OH Qty
--SG
--AVG_13WEEK_USAGE
- material type (zrep etc)

SELECT  BSSO_T.ID            AS ID,
  BSSO_T.RP_MATERIAL        AS RP_MATERIAL,
  BSSO_T.RP_CATALOG_DASH    AS RP_CATALOG_DASH,
  BSSO_T.RP_PLANT           AS RP_PLANT,
  BSSO_T.RP_D_CHAIN_BLK     AS RP_D_CHAIN_BLK,
  BSSO_T.RP_UNIT_COST       AS RP_UNIT_COST,
  BSSO_T.RP_STRATEGY_GRP    AS RP_STRATEGY_GRP,
  BSSO_T.RP_OH_QTY          AS RP_OH_QTY,
  BSSO_T.RP_MATL_TYPE       AS RP_MATL_TYPE,
  SG_CH.SG_CHECK          AS SG_CHECK,
  BSSO_T.RP_CURRENT_SERIES  AS RP_CURRENT_SERIES, --this need to change to A,B,C
  BSSO_T.RP_ISSUE_UOM       AS RP_ISSUE_UOM, --DELIVERY UNIT
  BSSO_T.Q1_SHIP_QTY        AS Q1_SHIP_QTY,
  BSSO_T.Q2_SHIP_QTY        AS Q2_SHIP_QTY,
  BSSO_T.Q3_SHIP_QTY        AS Q3_SHIP_QTY,
  BSSO_T.Q4_SHIP_QTY        AS Q4_SHIP_QTY,
  BSSO_T.Q1_LN_QTY          AS Q1_LN_QTY,
  BSSO_T.Q2_LN_QTY          AS Q2_LN_QTY,
  BSSO_T.Q3_LN_QTY          AS Q3_LN_QTY,
  BSSO_T.Q4_LN_QTY          AS Q4_LN_QTY,
  BSSO_T.ALLOWED_SCHED_RTRN   AS ALLOW_RETURN_FLG,
  BSSO_T.VENDOR             AS VENDOR,
  BSSO_T.VP_STRATEGY_GRP    AS VP_STRATEGY_GRP,
  BSSO_T.VP_OH_QTY          AS VP_OH_QTY,
  BSSO_T.VP_Q4_SUM AS VP_Q4_SUM
  FROM
(
SELECT BSSO.ID            AS ID,
  BSSO.RP_MATERIAL        AS RP_MATERIAL,
  BSSO.RP_CATALOG_DASH    AS RP_CATALOG_DASH,
  BSSO.RP_PLANT           AS RP_PLANT,
  BSSO.RP_D_CHAIN_BLK     AS RP_D_CHAIN_BLK,
  BSSO.RP_UNIT_COST       AS RP_UNIT_COST,
  BSSO.RP_STRATEGY_GRP    AS RP_STRATEGY_GRP,
  BSSO.RP_OH_QTY          AS RP_OH_QTY,
  BSSO.RP_MATL_TYPE       AS RP_MATL_TYPE,
  BSSO.RP_CURRENT_SERIES  AS RP_CURRENT_SERIES, --this need to change to A,B,C
  BSSO.RP_ISSUE_UOM       AS RP_ISSUE_UOM, --DELIVERY UNIT
  BSSO.Q1_SHIP_QTY        AS Q1_SHIP_QTY,
  BSSO.Q2_SHIP_QTY        AS Q2_SHIP_QTY,
  BSSO.Q3_SHIP_QTY        AS Q3_SHIP_QTY,
  BSSO.Q4_SHIP_QTY        AS Q4_SHIP_QTY,
  BSSO.Q1_LN_QTY          AS Q1_LN_QTY,
  BSSO.Q2_LN_QTY          AS Q2_LN_QTY,
  BSSO.Q3_LN_QTY          AS Q3_LN_QTY,
  BSSO.Q4_LN_QTY          AS Q4_LN_QTY,
  ST.ALLOWED_SCHED_RTRN   AS ALLOW_RETURN_FLG,
  BSSO.VENDOR             AS VENDOR,
  BSSO.VP_STRATEGY_GRP    AS VP_STRATEGY_GRP,
  BSSO.VP_OH_QTY          AS VP_OH_QTY,
  CEIL(NVL(BSSO.VP_AVG13_USAGE_QTY,0) * 13) AS VP_Q4_SUM
FROM
  (SELECT BSXV.ID           AS ID,
    BSXV.RP_MATERIAL        AS RP_MATERIAL,
    BSXV.RP_CATALOG_DASH    AS RP_CATALOG_DASH,
    BSXV.RP_PLANT           AS RP_PLANT,
    BSXV.RP_D_CHAIN_BLK     AS RP_D_CHAIN_BLK,
    BSXV.RP_UNIT_COST       AS RP_UNIT_COST,
    BSXV.RP_ISSUE_UOM       AS RP_ISSUE_UOM,
    BSXV.RP_STRATEGY_GRP    AS RP_STRATEGY_GRP,
    BSXV.RP_OH_QTY          AS RP_OH_QTY,
    BSXV.RP_AVG13_USAGE_QTY AS RP_AVG13_USAGE_QTY,
    BSXV.RP_VENDOR_KEY      AS RP_VENDOR_KEY,
    BSXV.RP_MATL_TYPE       AS RP_MATL_TYPE,
    BSXV.RP_CURRENT_SERIES  AS RP_CURRENT_SERIES,
    BSXV.VENDOR             AS VENDOR,
    BSXV.VP_STRATEGY_GRP    AS VP_STRATEGY_GRP,
    BSXV.VP_OH_QTY          AS VP_OH_QTY,
    BSXV.VP_AVG13_USAGE_QTY AS VP_AVG13_USAGE_QTY,
    SOLNSH.Q1_SHIP_QTY      AS Q1_SHIP_QTY,
    SOLNSH.Q2_SHIP_QTY      AS Q2_SHIP_QTY,
    SOLNSH.Q3_SHIP_QTY      AS Q3_SHIP_QTY,
    SOLNSH.Q4_SHIP_QTY      AS Q4_SHIP_QTY,
    SOLNSH.Q1_LN_QTY        AS Q1_LN_QTY,
    SOLNSH.Q2_LN_QTY        AS Q2_LN_QTY,
    SOLNSH.Q3_LN_QTY        AS Q3_LN_QTY,
    SOLNSH.Q4_LN_QTY        AS Q4_LN_QTY
  FROM
    (SELECT RETURN_PLANT.ID                AS ID,
      RETURN_PLANT.MATERIAL                AS RP_MATERIAL,
      RETURN_PLANT.CATALOG_DASH            AS RP_CATALOG_DASH,
      RETURN_PLANT.PLANT                   AS RP_PLANT,
      RETURN_PLANT.D_CHAIN_BLK             AS RP_D_CHAIN_BLK,
      RETURN_PLANT.UNIT_COST               AS RP_UNIT_COST,
      RETURN_PLANT.ISSUE_UOM_NUMERATOR     AS RP_ISSUE_UOM,
      RETURN_PLANT.STRATEGY_GRP            AS RP_STRATEGY_GRP,
      RETURN_PLANT.OH_QTY                  AS RP_OH_QTY,
      RETURN_PLANT.AVG13_USAGE_QTY         AS RP_AVG13_USAGE_QTY,
      RETURN_PLANT.VENDOR_KEY              AS RP_VENDOR_KEY,
      RETURN_PLANT.MATL_TYPE               AS RP_MATL_TYPE,
      RETURN_PLANT.CURRENT_SERIES          AS RP_CURRENT_SERIES,
      SUBSTR(RETURN_PLANT.VENDOR_KEY,0,4) AS VENDOR,
      VENDOR_PLANT.STRATEGY_GRP            AS VP_STRATEGY_GRP,
      VENDOR_PLANT.OH_QTY                  AS VP_OH_QTY,
      VENDOR_PLANT.AVG13_USAGE_QTY         AS VP_AVG13_USAGE_QTY
    FROM
      (SELECT ID,
        MATERIAL,
        CATALOG_DASH,
        PLANT,
        D_CHAIN_BLK,
        UNIT_COST,
        ISSUE_UOM_NUMERATOR,
        STRATEGY_GRP,
        OH_QTY,
        AVG13_USAGE_QTY,
        VENDOR_KEY,
        MATL_TYPE,
        CURRENT_SERIES,
        VENDOR_ITEM
      FROM INV_SAP_PP_OPT_X
      WHERE PLANT  IN ('5100')
      AND MATERIAL IN ('150-C25NBD B')
      )RETURN_PLANT
    LEFT JOIN
      ( SELECT ID, STRATEGY_GRP, OH_QTY, AVG13_USAGE_QTY FROM INV_SAP_PP_OPT_X
      )VENDOR_PLANT
    ON VENDOR_PLANT.ID = RETURN_PLANT.VENDOR_ITEM
    )BSXV
  LEFT JOIN
    (SELECT ID,
      MATERIAL,
      PLANT,
      Q1_SHIP_QTY,
      Q2_SHIP_QTY,
      Q3_SHIP_QTY,
      Q4_SHIP_QTY,
      Q1_LN_QTY,
      Q2_LN_QTY,
      Q3_LN_QTY,
      Q4_LN_QTY
    FROM VIEW_INV_SAP_AP_SOLNSH_STAT
    WHERE PLANT IN ('5100')
    )SOLNSH
  ON SOLNSH.ID = BSXV.ID
  )BSSO
LEFT JOIN
  (SELECT MATERIALID
    ||'_'
    ||DIRECT_SHIP_PLANT AS ID,
    ALLOWED_SCHED_RTRN
  FROM INV_SAP_PP_MVKE
  )ST
ON ST.ID = BSSO.ID
)BSSO_T
LEFT JOIN
(
SELECT ID, SG_CHECK FROM INV_SAP_SR_SGCHECK
)SG_CH
ON SG_CH.ID = BSSO_T.ID

--In AP, we need to create one table like the cross table. 
--------------------------------
-- Unable to render VIEW DDL for object DWQ$LIBRARIAN.INV_SAP_CROSS_PART_V with DBMS_METADATA attempting internal generator.
--'5040', '5050', '5100', '5110', '5120', '5160', '5190', '5200','5070','5140'
DROP VIEW VIEW_INV_SAP_AP_SOLNSH_STAT;

CREATE VIEW VIEW_INV_SAP_AP_SOLNSH_STAT AS
SELECT ID,
  MATERIAL,
  CATALOG#,
  PLANT,
  SUM(Q1) AS Q1_SHIP_QTY,
  SUM(Q2) AS Q2_SHIP_QTY,
  SUM(Q3) AS Q3_SHIP_QTY,
  SUM(Q4) AS Q4_SHIP_QTY,
  SUM(LN_Q1) AS Q1_LN_QTY,
  SUM(LN_Q2) AS Q2_LN_QTY,
  SUM(LN_Q3) AS Q3_LN_QTY,
  SUM(LN_Q4) AS Q4_LN_QTY
FROM
(
SELECT ID,
  MATERIAL,
  CATALOG#,
  PLANT,
  CASE
    WHEN LAST_GI_DATE BETWEEN TO_CHAR(SYSDATE - 365 )
    AND TO_CHAR(SYSDATE                      - 273)
    THEN SHIP_QTY
    ELSE 0
  END Q1,
  CASE
    WHEN LAST_GI_DATE BETWEEN TO_CHAR(SYSDATE - 273)
    AND TO_CHAR(SYSDATE                      - 182)
    THEN SHIP_QTY
    ELSE 0
  END Q2,
  CASE
    WHEN LAST_GI_DATE BETWEEN TO_CHAR(SYSDATE- 182)
    AND TO_CHAR(SYSDATE                     - 91)
    THEN SHIP_QTY
    ELSE 0
  END Q3,
  CASE
    WHEN LAST_GI_DATE BETWEEN TO_CHAR(SYSDATE - 91) AND TO_CHAR(SYSDATE)
    THEN SHIP_QTY
    ELSE 0
  END Q4,
    CASE
    WHEN LAST_GI_DATE BETWEEN TO_CHAR(SYSDATE - 365 )
    AND TO_CHAR(SYSDATE                      - 273)
    THEN COUNT_LINE
    ELSE 0
  END LN_Q1,
  CASE
    WHEN LAST_GI_DATE BETWEEN TO_CHAR(SYSDATE - 273)
    AND TO_CHAR(SYSDATE                      - 182)
    THEN COUNT_LINE
    ELSE 0
  END LN_Q2,
  CASE
    WHEN LAST_GI_DATE BETWEEN TO_CHAR(SYSDATE- 182)
    AND TO_CHAR(SYSDATE                     - 91)
    THEN COUNT_LINE
    ELSE 0
  END LN_Q3,
  CASE
    WHEN LAST_GI_DATE BETWEEN TO_CHAR(SYSDATE - 91) AND TO_CHAR(SYSDATE)
    THEN COUNT_LINE
    ELSE 0
  END LN_Q4
FROM
  (
  SELECT ID,
    MATERIAL,
    CATALOG#,
    COMMITTED_DATE,
    LAST_GI_DATE,
    CREATION_DATE,
    REQUEST_DATE,
    PLANT,
    ORDER_QTY,
    (NVL(ORDER_QTY,0) - NVL(OPEN_QTY,0)) AS SHIP_QTY,
    1 AS COUNT_LINE
  FROM VIEW_INV_SAP_SALES_HST_LC WHERE (LAST_GI_DATE BETWEEN TO_CHAR(SYSDATE - 365) AND TO_CHAR(SYSDATE))
  )
)
GROUP BY
ID,
MATERIAL,
PLANT,
CATALOG#


--Other AP Plant Stock Status
VIEW_INV_SAP_SGC_5140
VIEW_INV_SAP_SGC_5200
VIEW_INV_SAP_SGC_5040
VIEW_INV_SAP_SGC_5050
VIEW_INV_SAP_SGC_5070
VIEW_INV_SAP_SGC_5110
VIEW_INV_SAP_SGC_5100
VIEW_INV_SAP_SGC_5120
VIEW_INV_SAP_SGC_5190
VIEW_INV_SAP_SGC_5160

CREATE VIEW VIEW_INV_SAP_SGC_5160 AS
SELECT DISTINCT BS.ID AS ID,
  BS.MATERIAL         AS MATERIAL,
  CASE
    WHEN SG_CHECK.STRATEGY_GRP_CHECK IS NULL
    THEN 'NO'
    ELSE 'YES'
  END SG_CHECK
FROM
  (SELECT ID,
    MATERIAL
  FROM INV_SAP_PP_OPT_X
  WHERE PLANT       = '5160'
  )BS
LEFT JOIN
  (SELECT ID,
    CASE
      WHEN STRATEGY_GRP = '40'
      THEN 'YES'
      ELSE 'NO'
    END STRATEGY_GRP_CHECK,
    MATERIAL
  FROM
    (SELECT ID,
      PLANT,
      STRATEGY_GRP,
      MATERIAL
    FROM INV_SAP_PP_OPT_X
    WHERE PLANT IN ('5040', '5050', '5100', '5110', '5120', '5160', '5190', '5200','5070','5140')
    )
  WHERE PLANT NOT IN '5160'
  AND STRATEGY_GRP = '40'
  )SG_CHECK
ON BS.MATERIAL = SG_CHECK.MATERIAL;



SELECT COUNT(*) FROM INV_SAP_SR_SGCHECK WHERE SG_CHECK = 'NO';



DECLARE
  TRUNCATE_SGCHECK_TABLE  VARCHAR2(1000);
  INSERT_SGCHECK_5140  VARCHAR2(1000);
  INSERT_SGCHECK_5040  VARCHAR2(1000);
  INSERT_SGCHECK_5050  VARCHAR2(1000);
  INSERT_SGCHECK_5100  VARCHAR2(1000);
  INSERT_SGCHECK_5110  VARCHAR2(1000);
  INSERT_SGCHECK_5120  VARCHAR2(1000);
  INSERT_SGCHECK_5160  VARCHAR2(1000);
  INSERT_SGCHECK_5190  VARCHAR2(1000);
  INSERT_SGCHECK_5070  VARCHAR2(1000);
  INSERT_SGCHECK_5200  VARCHAR2(1000);

BEGIN
  TRUNCATE_SGCHECK_TABLE   := 'TRUNCATE TABLE INV_SAP_SR_SGCHECK';
  INSERT_SGCHECK_5140 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5140';
  INSERT_SGCHECK_5040 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5040';
  INSERT_SGCHECK_5050 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5050';
  INSERT_SGCHECK_5100 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5100';
  INSERT_SGCHECK_5110 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5110';
  INSERT_SGCHECK_5120 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5120';
  INSERT_SGCHECK_5160 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5160';
  INSERT_SGCHECK_5190 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5190';
  INSERT_SGCHECK_5070 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5070';
  INSERT_SGCHECK_5200 := 'INSERT INTO INV_SAP_SR_SGCHECK SELECT * FROM VIEW_INV_SAP_SGC_5200';
  EXECUTE IMMEDIATE TRUNCATE_SGCHECK_TABLE;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5140;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5040;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5050;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5100;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5110;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5120;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5160;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5190;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5070;
  EXECUTE IMMEDIATE INSERT_SGCHECK_5200;
END;   		

